{"name":"Connect to the Natural World","tagline":"A simple method for connecting plants to the web utilizing Arduino, Processing and Google Docs.  ","body":"I have always been frustrated with the technical and time requirements needed to view physical sensor data on the web. Services like Xively, ThingSpeak and Nimbits provide excellent features they all require some prerequisite knowledge of enough web technologies that may come across as intimidating, especially to those who may be new to programing. While searching for a simpler method to teach to youth, I came across some wonderful examples on journal.code4lib.org and Instructables on how to utilize Google Docs as an easier solution. \r\n\r\n#### Hardware & Software Needed\r\n* Hardware used in this tutorial:\r\n* Temperature and Humidity Sensor (Grove)\r\n* Moisture Sensor (Grove)\r\n* Arduino Uno\r\n* Breadboard\r\n\r\n#### Software used in this tutorial:\r\n* Arduino\r\n* Humidity Temperature Sensor - Arduino Library(How to install a library for Arduino)\r\n* Processing\r\n* HTTProcessing - Processing Library  (How to install a library for Processing)\r\n\r\n\r\n###1. Arduino\r\nSetup your sensors by assembling the breadboard as the image shown here: \r\n[image] \r\n\r\n*note: we are only using the power and ground rails on the breadboard\r\n\r\nOpen and Run Plant_Sensors.ino\r\n\r\nYou should now see 3 variables streaming at the bottom of your serial window.\r\n\r\nnote: from the wiki\r\n* Humidity range \t= 20% - 90% RH\r\n* Temperature range \t= 0 - 50 C\r\n* Moisture range \t= 0 - 950\r\n\r\n###2. Google Forms\r\nCreate a Google Form with 3 text inputs labeled:  Humidity, Temperature and Moisture\r\n[image]\r\nWhile Viewing the Form, copy the url key located here and save it for later, we will need it: \r\n[image]\r\nCopy the id for each input field.  To do this you will need t\r\n\r\n###3. Processing\r\nOpen and run Sensors_Test.  Check for the streaming variables to make that the data you are receiving from the arduino is correct.\r\n[image]\r\nOpen Sensors2gDocs.pde and replace the XXXX with the information recorded for your google form\r\nRun Sensors2gDocs.pde and open your google docs…..\r\n\r\n###4. Visualize it\r\n\r\nSimple\r\nUse the following formulas to find the last entry in column and add them to the side of your spreadsheet.\r\n* =INDEX( A:A ; ROWS( A:A ) )\r\n* =INDEX( B:B ; ROWS( B:B ) )\r\n* =INDEX( C:C ; ROWS( C:C ) )\r\n* =INDEX( D:D ; ROWS( D:D ) )\r\n[image]\r\n\r\nNow, highlight the Humidity, Temperature and Moisture variables  and Insert a Gauge Chart.\r\nSelect to publish the chart and copy the code that is given to you.\r\n\r\nTo test this I use Mozilla’s thimble to create a simple website shown here: [link]\r\n\r\nThe downside to this method is that the gauge chart will only update when the page is reloaded.  To have the gauge automatically refresh we will need to call use some custom javascript to construct how we populate the gauge.\r\n\r\nAdvance\r\n\r\nThimble Template to use: https://thimble.webmaker.org/project/10274/remix\r\n\r\nI designed this tutorial to give a brief overview of multiple software and hardware components.  With that said, this process can be streamlined with devices such as an arduino wifi shield, raspberry pi and the electric imp just to name a few.  I recently had the most amazing time being able to facilitate a workshop session around this tutorial at the 2013 MozFest with fantastic results.  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}