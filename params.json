{"name":"Connect to the Natural World","tagline":"","body":"### How to connect plants to the web using Arduino, Processing and Google Docs.  \r\n\r\nI have always been frustrated with the technical and time requirements needed to view physical sensor data on the web. Services like [Xively](https://xively.com/), [ThingSpeak](https://www.thingspeak.com/) and [Nimbits](http://www.nimbits.com/) provide excellent features but they all require enough prerequisite knowledge of certain web technologies that may come across as intimidating, especially to those who may be new to programing. While searching for a simpler method to teach to youth, I came across some wonderful examples on [journal.code4lib.org](http://journal.code4lib.org/articles/8200) and [Instructables](http://www.instructables.com/id/How-to-use-Google-docs-for-data-logging/) on how to utilize Google Docs as an easier solution.\r\n\r\nI designed this tutorial to give a brief overview of multiple software and hardware components.  With that said, this process can be made even simpler with devices such as an [Arduino Wifi Shield](http://arduino.cc/en/Main/ArduinoWiFiShield), Raspberry Pi or an Electric Imp, just to name a few.\r\n\r\n**Hardware used in this tutorial:**  \r\n* [Temperature and Humidity Sensor (Grove)](http://www.seeedstudio.com/wiki/Grove-_Temperature_and_Humidity_Sensor)  \r\n* [Moisture Sensor (Grove)](http://seeedstudio.com/wiki/Grove_-_Moisture_Sensor)  \r\n* [Arduino Uno](http://arduino.cc/en/Main/arduinoBoardUno)  \r\n* [Breadboard](https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard)\r\n\r\n**Software used in this tutorial:**  \r\n* [Arduino](http://arduino.cc/en/main/software)  \r\n* [Humidity Temperature Sensor](https://github.com/Seeed-Studio/Grove_Temperature_And_Humidity_Sensor) - Arduino Library [(How to install)](http://arduino.cc/en/Guide/Libraries)  \r\n* [Processing](http://processing.org/)  \r\n* [HTTProcessing](https://github.com/runemadsen/HTTProcessing) - Processing Library [(How to Install)](http://wiki.processing.org/w/How_to_Install_a_Contributed_Library)  \r\n\r\n***\r\n\r\n###1. Arduino\r\n+ Setup your sensors by assembling the breadboard as shown below. In this setup we are only using the breadboard to send power and ground across the side rails. Connect the signal of your humidity & temperature sensor to the Arduino's **Digital Input Pin 2** and the signal of your moisture sensor to the Arduino's **Analog Input Pin 0**  \r\n \r\n![breadboard](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/breadboard.jpg)\r\n\r\n+ Open and run [PlantSensors.ino](https://github.com/mganucheau/Connect-to-the-Natural-World/blob/gh-pages/*Arduino/PlantSensors/PlantSensors.ino).  \r\nYou should now see 3 variables streaming at the bottom of your serial window.\r\n\r\n![serialview](https://github.com/mganucheau/Connect-to-the-Natural-World/blob/gh-pages/images/serialviewsmall.jpg?raw=true)\r\n\r\n+ According to the manufacturer's wiki here are the value ranges for each sensor:<br/>\r\n\r\nSensor | Range \r\n--- | --- \r\nHumidity | 20% - 90% ([RH](http://en.wikipedia.org/wiki/Relative_humidity))\r\nTemperature | 0 - 50 (C) \r\nMoisture | 0 - 950 \r\n\r\n###2. Google Forms\r\n+ Create a Google Form with 3 text inputs labeled:  \r\nHumidity, Temperature and Moisture\r\n\r\n![googleform](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/googleform.jpg)\r\n\r\n+ While Viewing the Form, copy the url key located here and save it for later, we will need it: \r\n\r\n![googleform](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/formkey.jpg)\r\n\r\n+ Next, save the entry id that is generated for each field by control clicking on the field and selecting Inspect Element (note: this method may vary depending on your browser).  Here you can find the entry ID as the string of numbers following **#entry_** .  \r\n\r\n![entryid](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/entryid.jpg)\r\n\r\n\r\n###3. Processing\r\n+ Open and run [SensorsTest.pde](https://github.com/mganucheau/Connect-to-the-Natural-World/blob/gh-pages/*Processing/SensorsTest/SensorsTest.pde), then check for the streaming variables to make that the data you are receiving from the Arduino is correct. Depending on your setup, you may need to change your serial input called by changing the variable in the line **Serial.list()[1]** to the appropriate number.  For more info on this visit: here\r\n\r\n![processingtest](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/procesingtest.jpg)\r\n\r\n\r\n+ Next, open [Sensors2gDocs.pde](https://github.com/mganucheau/Connect-to-the-Natural-World/blob/gh-pages/*Processing/Sensors2gDocs/Sensors2gDocs.pde) and, in the setup of your sketch, replace the **XXXXXXXXXX** with the information recorded in your google form. Now run the script.\r\n\r\nString formURL = \"https://docs.google.com/forms/d/**XXXXXXXXXX**/ formResponse\";  \r\nString field1 = \"entry.**XXXXXXXXXX**\";  \r\nString field2 = \"entry.**XXXXXXXXXX**\";  \r\nString field3 = \"entry.**XXXXXXXXXX**\";   \r\n\r\n###4. Visualize it\r\n+ Use the following formulas to find the last entry in column and add them to the side of your spreadsheet.   \r\n</br>\r\n=INDEX( A:A ; ROWS( A:A ) )  \r\n=INDEX( B:B ; ROWS( B:B ) )  \r\n=INDEX( C:C ; ROWS( C:C ) )   \r\n=INDEX( D:D ; ROWS( D:D ) )  \r\n</br>\r\n![spreadsheetformula](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/spreadsheetformula.jpg)\r\n\r\n+ With the Humidity, Temperature and Moisture variables highlighted insert a **Gauge Chart**.\r\n\r\n![gauge](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/gauge.jpg)\r\n\r\n+ After you have inserted a gauge chart, toggle the menue option in the upper right and select to **Publish Chart** this will then give you the code needed to embed your gauges in another webpage.\r\n\r\n![publishgauge](https://raw.github.com/mganucheau/Connect-to-the-Natural-World/gh-pages/images/publishgauge.jpg)\r\n\r\n***\r\n\r\n### Final Thougths\r\n\r\nThis is a simple method that avoids setting up a database or scripting any custom code. The downside to this method is that the gauge chart will only update when the page is reloaded.  To have the gauge automatically refreshes we will need to call use some custom javascript to construct how we populate the gauge.  Stay tuned for a tutorial on how to do just that coming soon.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}